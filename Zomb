#include <iostream>
#include <Windows.h>
#include <conio.h>
#include <vector>

using namespace std;

bool gameOver;
int x, y;
const int width = 60;
const int height = 20;
int zombX, zombY, zomb2X, zomb2Y;
enum eDirection { STOP = 0, LEFT, RIGHT, UP, DOWN };
eDirection dir;

void Setup()
{
	gameOver = false;
	dir = STOP;
	x = width / 2;
	y = height / 2;
	zombX = rand() % width;
	zombY = rand() % height;
	zomb2X = rand() % width;
	zomb2Y = rand() % height;
}

void Draw()
{
	system("cls");										//Console command clear screen
	for (int i = 0; i < width + 2; i++)
		cout << "*";									//Printing top wall
	cout << endl;

	for (int i = 0; i < height; i++) //i = height
	{
		for (int j = 0; j < width; j++)
		{
			if (j == 0)
				cout << "*";
			if (i == y && j == x)
				cout << "I";
			else
			{
				bool print = false;
				if (!print)
					cout << " ";
			}

			if (j == width - 1)
				cout << "*";
		}
		cout << endl;
	}

	for (int i = 0; i < width + 2; i++)
		cout << "*";
	cout << endl;
}

void Logic()
{
	switch (dir)
	{
	case LEFT:
		x--;
		break;
	case RIGHT:
		x++;
		break;
	case DOWN:
		y++;
		break;
	case UP:
		y--;
		break;
	default:
		break;
	}
	if (x > width || x < 0 || y > height || y < 0)
		gameOver = true;
	if (x == zombX && y == zombY || x == zomb2X && zomb2Y)
		gameOver = true;
}

void Input()
{
	if (_kbhit())
	{
		switch (_getch())
		{
		case 'a':
			dir = LEFT;
			break;
		case 'd':
			dir = RIGHT;
			break;
		case 's':
			dir = DOWN;
			break;
		case 'w':
			dir = UP;
			break;
		case 'x':
			gameOver = true;
			break;
		}
	}
}

class Zombie
{
private: 
	static int m_counter;
	int m_x;
	int m_y;
public:
	void change_x_pos()
	{
		if (x < zombX)
			zombX -= 1;
		else if (x > zombX)
			zombX += 1;
	}

	void change_y_pos()
	{
		if (y < zombY)
			zombY -= 1;
		else if (y > zombY)
			zombY += 1;
	}
	Zombie(int a, int b)
	{
		m_x = a;
		m_y = b;
	};

	static bool speed()
	{
		return (m_counter++ % 2 == 0);
	}

	int stuff()
	{
		return m_x;
	}

	int stuff2()
	{
		return m_y;
	}
	
	void action()
	{
		if (speed())
			change_x_pos(); 
		else 
			change_y_pos();
	}
};

int Zombie::m_counter = 0;

int main()
{
	Setup();
	Zombie zombie1(rand(), rand());
	Zombie zombie2(rand(), rand());
	Zombie zombie3(rand(), rand());
	vector<Zombie> vec;
	vec.emplace_back(zombie1);
	vec.emplace_back(zombie2);
	vec.emplace_back(zombie3);
	while (!gameOver)
	{
		Draw();
		zombie1.action();
		zombie2.action();
		zombie3.action();
		Logic();
		Input();
		Sleep(30);
	}
}
